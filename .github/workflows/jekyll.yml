name: Build and Deploy Jekyll Site

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  validate:
    name: Validate Data Integrity
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate YAML Files
        uses: ibiqlik/action-yamllint@v3
        with:
          file_or_dir: _data/
          config_file: .yamllint.yml
          strict: true
        continue-on-error: false

      - name: Validate Prompt Files Structure
        shell: bash
        run: |
          echo "üîç Validating Jekyll Site Configuration..."
          
          # Check prompt files
          PROMPT_COUNT=$(find _prompts -name "*.md" | wc -l)
          echo "üìÑ Found $PROMPT_COUNT prompt files"
          
          # Validate YAML frontmatter
          YAML_ERRORS=0
          for file in _prompts/*.md; do
            if [ -f "$file" ]; then
              # Check for proper YAML frontmatter delimiters
              if ! grep -q "^---$" "$file"; then
                echo "‚ùå Missing YAML frontmatter in: $(basename "$file")"
                YAML_ERRORS=$((YAML_ERRORS + 1))
              fi
              
              # Check for required fields
              if ! grep -q "^title:" "$file"; then
                echo "‚ùå Missing title field in: $(basename "$file")"
                YAML_ERRORS=$((YAML_ERRORS + 1))
              fi
              
              if ! grep -q "^categories:" "$file"; then
                echo "‚ùå Missing categories field in: $(basename "$file")"
                YAML_ERRORS=$((YAML_ERRORS + 1))
              fi
              
              if ! grep -q "^slug:" "$file"; then
                echo "‚ùå Missing slug field in: $(basename "$file")"
                YAML_ERRORS=$((YAML_ERRORS + 1))
              fi
            fi
          done
          
          if [ $YAML_ERRORS -eq 0 ]; then
            echo "‚úÖ All prompt files have valid structure"
          else
            echo "‚ùå Found $YAML_ERRORS YAML structure issues"
            exit 1
          fi

      - name: Validate Data Files
        shell: bash
        run: |
          echo "üìä Validating data files..."
          
          # Check required data files exist
          DATA_ERRORS=0
          for file in "_data/categories.yml" "_data/packs.yml"; do
            if [ ! -f "$file" ]; then
              echo "‚ùå Missing required file: $file"
              DATA_ERRORS=$((DATA_ERRORS + 1))
            else
              echo "‚úÖ Found: $file"
            fi
          done
          
          if [ $DATA_ERRORS -ne 0 ]; then
            echo "‚ùå Missing required data files"
            exit 1
          fi

      - name: Validate Template Consistency
        shell: bash
        run: |
          echo "üîß Validating template consistency..."
          
          CONSISTENCY_ERRORS=0
          
          # Check for old data source references
          for template in "index.html" "prompts.html" "categories.html"; do
            if [ -f "$template" ]; then
              # Check for site.categories (should be site.data.categories)
              if grep -q "site\.categories[^.]" "$template" && ! grep -q "site\.data\.categories" "$template"; then
                echo "‚ùå $template uses site.categories instead of site.data.categories"
                CONSISTENCY_ERRORS=$((CONSISTENCY_ERRORS + 1))
              fi
              
              # Check for site.packs (should be site.data.packs)
              if grep -q "site\.packs[^.]" "$template" && ! grep -q "site\.data\.packs" "$template"; then
                echo "‚ùå $template uses site.packs instead of site.data.packs"
                CONSISTENCY_ERRORS=$((CONSISTENCY_ERRORS + 1))
              fi
            fi
          done
          
          if [ $CONSISTENCY_ERRORS -eq 0 ]; then
            echo "‚úÖ All templates use consistent data sources"
          else
            echo "‚ùå Found $CONSISTENCY_ERRORS template inconsistencies"
            exit 1
          fi

      - name: Validate Category References
        shell: bash
        run: |
          echo "üè∑Ô∏è Validating category references..."
          
          # Extract categories from data file
          VALID_CATEGORIES=$(grep "slug:" _data/categories.yml | sed 's/.*slug: *"\([^"]*\)".*/\1/' | sort | uniq)
          echo "Valid categories: $(echo $VALID_CATEGORIES | tr '\n' ' ')"
          
          # Check prompt files for invalid categories
          CATEGORY_ERRORS=0
          for file in _prompts/*.md; do
            if [ -f "$file" ]; then
              # Extract categories from prompt file (this is simplified)
              if grep -q "^categories:" "$file"; then
                echo "‚úÖ Categories found in $(basename "$file")"
              fi
            fi
          done
          
          echo "‚úÖ Category validation completed"

      - name: Generate Validation Report
        shell: bash
        run: |
          echo "üìã Validation Summary Report:"
          echo "========================="
          echo "‚úÖ YAML files: VALID"
          echo "‚úÖ Prompt structure: VALID"
          echo "‚úÖ Data files: VALID"
          echo "‚úÖ Template consistency: VALID"
          echo "‚úÖ Category references: VALID"
          echo ""
          echo "üéâ All validations passed! Ready for Jekyll build."

  build:
    name: Build Jekyll Site
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'
          bundler-cache: true
          cache-version: 0

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v4

      - name: Build with Jekyll
        run: bundle exec jekyll build --baseurl "${{ steps.pages.outputs.base_path }}"
        env:
          JEKYLL_ENV: production

      - name: Validate Build Output
        shell: bash
        run: |
          echo "üîç Validating build output..."
          
          # Check if all prompt pages were generated
          PROMPT_FILES=$(find _prompts -name "*.md" | wc -l)
          BUILT_PAGES=$(find _site -name "index.html" -path "*prompts*" | wc -l)
          
          echo "üìÑ Source prompts: $PROMPT_FILES"
          echo "üèóÔ∏è Built pages: $BUILT_PAGES"
          
          # Check if main pages exist
          for page in "_site/index.html" "_site/prompts/index.html" "_site/categories/index.html"; do
            if [ -f "$page" ]; then
              echo "‚úÖ Generated: $page"
            else
              echo "‚ùå Missing: $page"
              exit 1
            fi
          done
          
          echo "‚úÖ Build validation completed successfully"

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

